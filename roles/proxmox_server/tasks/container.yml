- name: Retrieve info from {{ container.hostname }} on {{ host_proxmox.node }}
  community.general.proxmox_vm_info:
    node: '{{ host_proxmox.node }}'
    vmid: '{{ container.proxmox_container.vmid }}'
    api_host: '{{ host_proxmox.host }}'
    api_user: '{{ host_proxmox.user }}'
    api_password: "{{ host_proxmox.password }}"
    config: current
  register:
    _proxmox_lxc_vm_info

- name: Container {{ container.hostname }} created on {{ host_proxmox.node }}
  no_log: True
  when: _proxmox_lxc_vm_info.proxmox_vms | length == 0
  vars:
    default_net:
      - "name=eth0,gw={{ general.gateway }},ip={{ container.ansible_host }}/24,bridge=vmbr0"
  community.general.proxmox:
    vmid: '{{ container.proxmox_container.vmid }}'
    node: '{{ host_proxmox.node }}'
    api_host: '{{ host_proxmox.host }}'
    api_user: '{{ host_proxmox.user }}'
    api_password: "{{ host_proxmox.password }}"
    hostname: "{{ container.hostname }}"
    ostemplate: "{{ container.proxmox_container.ostemplate | default('local:vztmpl/fedora-41-default_20241118_amd64.tar.xz') }}"
    pubkey: "{{ host_general.pubkey | default(omit) }}"
    password: "{{ container.proxmox_container.password | default(host_proxmox.password) }}"
    disk: '{{ container.proxmox_container.disk | default(omit) }}'
    mounts: "{{
        container.proxmox_container.mounts | 
        default(
          dict((
            range((container.storage_mnt | default([]) | length)) | 
            product(['mp']) | 
            map('reverse') | 
            map('join') |
            default(omit) |
            zip((
              (
                container |
                default({'storage_mnt':[]}) |
                community.general.json_query('storage_mnt[*].path') |
                default([], true) |
                zip(
                  container |
                  default({'storage_mnt':[]}) |
                  community.general.json_query('storage_mnt[*].target') |
                  default([], true)
                ) |
                map('join', ',mp=')
              ) |
              product([storage_btrfs_path]) |
              map('reverse') |
              map('join')
            )) |
            default(omit) |
            sort
          )) |
          default(omit, true)
        )
      }}"
    netif: "{{
        dict((
          range((container.proxmox_container.netif | default([]) | length) + 1) | 
          product(['net']) | 
          map('reverse') | 
          map('join') |
          zip((
            default_net |
            union((
              range(1, (container.proxmox_container.netif | default([]) | length) + 1) | 
              product(['name=eth']) | 
              map('reverse') | 
              map('join') | 
              zip(container.proxmox_container.netif | default([])) | 
              map('join', ',')
            )) |
            sort
          ))
        ))
      }}"
    cores: '{{ container.proxmox_container.cores | default(omit) }}'
    memory: '{{ container.proxmox_container.memory | default(omit) }}'
    swap: 0
    unprivileged: '{{ container.proxmox_container.unprivileged | default(omit) }}'
    features: '{{ container.proxmox_container.features | default(omit) }}'
    onboot: True
    state: present

- name: Container {{ container.hostname }} on {{ host_proxmox.node }} updated
  no_log: True
  when: _proxmox_lxc_vm_info.proxmox_vms | length > 0
  vars:
    default_net:
      - "name=eth0,gw={{ general.gateway }},ip={{ container.ansible_host }}/24,bridge=vmbr0"
  community.general.proxmox:
    vmid: '{{ container.proxmox_container.vmid }}'
    node: '{{ host_proxmox.node }}'
    api_host: '{{ host_proxmox.host }}'
    api_user: '{{ host_proxmox.user }}'
    api_password: "{{ host_proxmox.password }}"
    hostname: "{{ container.hostname }}"
    pubkey: "{{ host_general.pubkey | default(omit) }}"
    password: "{{ container.proxmox_container.password | default(host_proxmox.password) }}"
    disk: '{{ container.proxmox_container.disk | default(omit) }}'
    # mounts: '{{ container.proxmox_container.mounts | default(omit) }}'
    # mount_volumes: '{{ container.proxmox_container.mount_volumes | default(omit) }}'
    netif: "{{
              dict((
                range((container.proxmox_container.netif | default([]) | length) + 1) | 
                product(['net']) | 
                map('reverse') | 
                map('join') |
                zip((
                  default_net |
                  union((
                    range(1, (container.proxmox_container.netif | default([]) | length) + 1) | 
                    product(['name=eth']) | 
                    map('reverse') | 
                    map('join') | 
                    zip(container.proxmox_container.netif | default([])) | 
                    map('join', ',')
                  )) |
                  sort
                ))
              ))
            }}"
    cores: '{{ container.proxmox_container.cores | default(omit) }}'
    memory: '{{ container.proxmox_container.memory | default(omit) }}'
    swap: 0
    unprivileged: '{{ container.proxmox_container.unprivileged | default(omit) }}'
    features: '{{ container.proxmox_container.features | default(omit) }}'
    onboot: True
    update: true

- name: Container {{ container.hostname }} is running on {{ host_proxmox.node }}
  no_log: True
  community.general.proxmox:
    vmid: '{{ container.proxmox_container.vmid }}'
    api_host: '{{ host_proxmox.host }}'
    api_user: '{{ host_proxmox.user }}'
    api_password: "{{ host_proxmox.password }}"
    state: started

- name: Check if ansible is installed in {{ container.hostname }} on {{ host_proxmox.node }}
  ansible.builtin.shell: pct exec {{ container.proxmox_container.vmid }} -- dnf list --installed -q openssh-server
  register: result
  ignore_errors: True
  changed_when: False

- name: Install ansible in {{ container.hostname }} on {{ host_proxmox.node }}
  ansible.builtin.shell: |
    pct push {{ container.proxmox_container.vmid }} /opt/setup.sh /opt/setup.sh
    pct exec {{ container.proxmox_container.vmid }} -- chmod +x /opt/setup.sh
    pct exec {{ container.proxmox_container.vmid }} -- /opt/setup.sh
  when: result is failed
