---

- name: minetest server is installed
  dnf:
    name: minetest-server
    state: latest

- name: hotfix minetest until patch get's merged
  block:

    - name: Replace minetest@.service with the correct one 
      ansible.builtin.copy:
        src: minetest@.service
        dest: /usr/lib/systemd/system/minetest@.service
        force: true
        mode: '0644'
      register: patch_minetest

    - name: Just force systemd to reread configs
      ansible.builtin.systemd_service:
        daemon_reload: true
      when: patch_minetest is changed

- name: set minetest home valiable
  set_fact:
    mine_home: "/var/lib/minetest"

- name: install mapserver if activated
  block:

  - name: Ensure mapserver directory exists
    file:
      path: /opt/mapserver
      state: directory

  - name: Install mapserver
    unarchive:
      src: "https://github.com/minetest-mapserver/mapserver/releases/download/v4.9.1/mapserver_4.9.1_linux_amd64.tar.gz"
      dest: "/opt/mapserver/"
      owner: minetest
      group: minetest
      remote_src: yes

  - name: Install mapserver service
    ansible.builtin.copy:
      src: mapserver@.service
      dest: "/etc/systemd/system/mapserver@.service"

  - name: Get mapserver key
    shell: cat /opt/mapserver_key
    register: data
    ignore_errors: True
    changed_when: False

  - name: Generate mapserver secretkey
    set_fact:
      mapserver_secretkey: "{{ lookup('password', '/dev/null length=15 chars=ascii_letters') }}"
    when: data is failed

  - name: Read mapserver secretkey
    set_fact:
      mapserver_secretkey: "{{ data.stdout }}"
    when: data is not failed

  - name: Save generated key
    ansible.builtin.copy:
      dest: "/opt/mapserver_key"
      content: "{{ mapserver_secretkey }}"
      mode: 0600

  when: mapserver is defined

- name: Games folder exists
  file:
    path: "{{ mine_home }}/.minetest/games"
    state: directory
    owner: minetest
    group: minetest

- name: unzip is installed
  dnf:
    name: unzip
    state: latest

- name: set minetest home valiable
  set_fact:
    mine_sysconfig: "/etc/sysconfig/minetest/{{ world.id }}.conf"
    mine_config: "/etc/minetest/{{ world.id }}.conf"

- name: Check if game path exists
  stat:
    path: "{{ mine_home }}/.minetest/games/{{ game.name }}/game.conf"
  register: game_path

- name: Game is available
  unarchive:
    src: "{{ game.url }}"
    dest: "{{ mine_home }}/.minetest/games/"
    owner: minetest
    group: minetest
    remote_src: yes
  when: not game_path.stat.exists and not ansible_check_mode

- name: World mods folder must exist
  ansible.builtin.file:
    path: "{{ mine_home }}/{{ world.id }}/worldmods/{{( item.dir_name | default('') )}}"
    owner: minetest
    group: minetest
    state: directory
    mode: '0755'
  loop: "{{ game.mods }}"

- name: Mods are available
  include_tasks: mods.yaml
  loop: "{{ game.mods }}"
  when: "'mods' in game and not ansible_check_mode"

- name: Configure port
  ansible.builtin.copy:
    content: |
      PORT={{ world.port }}
      GAMEID={{ game.name }}
    dest: "{{ mine_sysconfig }}"
  notify:
    - 'luanti : Restart minetest service'

- name: Upload the minetest.conf file
  template:
    src: minetest.conf.j2
    dest: "{{ mine_config }}"
    owner: minetest
    group: minetest
    backup: yes
  notify:
    - 'luantiluanti : Restart minetest service'

- name: Restart service
  service:
    name: minetest@{{ world.id }}.service
    enabled: true
    state: started
    
- block:
  - name: Check if configuration changed
    template:
      src: mapserver.json.j2
      dest: "{{ mine_home }}/{{ world.id }}/test.mapserver.json"
      owner: minetest
      group: minetest
    register: mapserver_canary

  - name: Configure mapserver port
    template:
      src: mapserver.json.j2
      dest: "{{ mine_home }}/{{ world.id }}/mapserver.json"
      owner: minetest
      group: minetest
    when: mapserver_canary is changed
    notify:
      - 'luanti : Restart mapserver service'

  - name: Wait for world to exist
    ansible.builtin.wait_for:
      path: "{{ mine_home }}/{{ world.id }}/map.sqlite"
      state: present

  - name: Start Minetest-mapserver
    service:
      name: mapserver@{{ world.id }}.service
      enabled: true
      state: started

  when: mapserver is defined

