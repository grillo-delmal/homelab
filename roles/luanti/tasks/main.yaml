---

- name: Install minetest server
  ansible.builtin.dnf:
    name: minetest-server

- name: Make sure permissions are fine
  ansible.builtin.file:
    dest: /var/lib/minetest
    owner: minetest
    group: minetest
    recurse: true

- name: Hotfix minetest until patch get's merged
  block:

    - name: Replace minetest@.service with the correct one
      ansible.builtin.copy:
        src: minetest@.service
        dest: /usr/lib/systemd/system/minetest@.service
        force: true
        mode: '0644'
      register: patch_minetest

    - name: Just force systemd to reread configs
      ansible.builtin.systemd_service:
        daemon_reload: true
      when: patch_minetest is changed

- name: Set minetest home valiable
  ansible.builtin.set_fact:
    mine_home: "/var/lib/minetest"

- name: Install mapserver if activated
  when: luanti_config.mapserver is defined
  block:
    - name: Ensure mapserver directory exists
      ansible.builtin.file:
        path: /opt/mapserver
        state: directory

    # yamllint disable rule:line-length
    - name: Install mapserver
      ansible.builtin.unarchive:
        src: "https://github.com/minetest-mapserver/mapserver/releases/download/v4.9.1/mapserver_4.9.1_linux_amd64.tar.gz"
        dest: "/opt/mapserver/"
        owner: minetest
        group: minetest
        remote_src: true
    # yamllint enable rule:line-length

    - name: Install mapserver service
      ansible.builtin.copy:
        src: mapserver@.service
        dest: "/etc/systemd/system/mapserver@.service"
      register: add_service_result

    - name: Just force systemd to reread configs
      ansible.builtin.systemd_service:
        daemon_reload: true
      when: add_service_result is changed

    - name: Get mapserver key
      ansible.builtin.command: cat /opt/mapserver_key
      register: data
      ignore_errors: true
      changed_when: false

    - name: Generate mapserver secretkey
      ansible.builtin.set_fact:
        mapserver_secretkey: "{{
            lookup('password', '/dev/null length=15 chars=ascii_letters')
          }}"
      when: data is failed

    - name: Read mapserver secretkey
      ansible.builtin.set_fact:
        mapserver_secretkey: "{{ data.stdout }}"
      when: data is not failed

    - name: Save generated key
      ansible.builtin.copy:
        dest: "/opt/mapserver_key"
        content: "{{ mapserver_secretkey }}"
        mode: '0600'

- name: Games folder exists
  ansible.builtin.file:
    path: "{{ mine_home }}/.minetest/games"
    state: directory
    owner: minetest
    group: minetest

- name: Install unzip
  ansible.builtin.dnf:
    name: unzip

- name: Set minetest home valiable
  ansible.builtin.set_fact:
    mine_sysconfig: "/etc/sysconfig/minetest/{{ luanti_config.world.id }}.conf"
    mine_config: "/etc/minetest/{{ luanti_config.world.id }}.conf"

- name: Games folder archive exists
  ansible.builtin.file:
    path: "/opt/games/"
    state: directory
    owner: minetest
    group: minetest

- name: Download game
  ansible.builtin.get_url:
    url: '{{ luanti_config.game.url }}'
    dest: "/opt/games/{{
        (luanti_config.game.url | urlsplit('path') | split('/'))[-1]
      }}"
  register: game_archive

- name: Install new game
  when: game_archive is changed and not ansible_check_mode
  notify:
    - 'luanti : Restart minetest service'
  block:
    - name: Remove current version of the game if exist
      ansible.builtin.file:
        path: "{{ mine_home }}/.minetest/games/{{ luanti_config.game.name }}"
        state: absent

    - name: Game is available
      ansible.builtin.unarchive:
        src: "/opt/games/{{
            (luanti_config.game.url | urlsplit('path') | split('/'))[-1]
          }}"
        dest: "{{ mine_home }}/.minetest/games/"
        owner: minetest
        group: minetest
        remote_src: true

- name: List installed mods
  ansible.builtin.find:
    paths: "{{ mine_home }}/{{ luanti_config.world.id }}/worldmods/"
    file_type: directory
  register: installed_mods

- name: Make sure only listed mods exist
  ansible.builtin.file:
    path: "item.path"
    state: absent
  when: "(
    item.path |
      split('/')
    )[-1] not in (
      luanti_config.game.mods |
        default([]) |
          map(attribute='name')
    )"
  loop: "{{ installed_mods.files }}"

- name: Mods folder archive exists
  ansible.builtin.file:
    path: "/opt/mods/"
    state: directory
    owner: minetest
    group: minetest

- name: Mods are available
  ansible.builtin.include_tasks: mods.yaml
  loop: "{{ luanti_config.game.mods }}"
  when: "'mods' in luanti_config.game"

- name: Configure port
  ansible.builtin.copy:
    content: |
      PORT={{ luanti_config.world.port }}
      GAMEID={{ luanti_config.game.name }}
    dest: "{{ mine_sysconfig }}"
  notify:
    - 'luanti : Restart minetest service'

- name: Upload the minetest.conf file
  ansible.builtin.template:
    src: minetest.conf.j2
    dest: "{{ mine_config }}"
    owner: minetest
    group: minetest
    backup: true
  notify:
    - 'luanti : Restart minetest service'

- name: Start service
  ansible.builtin.service:
    name: minetest@{{ luanti_config.world.id }}.service
    enabled: true
    state: started

- name: Run mapserver
  when: luanti_config.mapserver is defined
  block:
    - name: Check if configuration changed
      become: true
      become_user: minetest
      ansible.builtin.template:
        src: mapserver.json.j2
        dest: "{{ mine_home }}/{{ luanti_config.world.id }}/test.mapserver.json"
        owner: minetest
        group: minetest
      register: mapserver_canary

    - name: Configure mapserver port
      become: true
      become_user: minetest
      ansible.builtin.template:
        src: mapserver.json.j2
        dest: "{{ mine_home }}/{{ luanti_config.world.id }}/mapserver.json"
        owner: minetest
        group: minetest
      when: mapserver_canary is changed
      notify:
        - 'luanti : Restart mapserver service'

    - name: Wait for world to exist
      become: true
      become_user: minetest
      ansible.builtin.wait_for:
        path: "{{ mine_home }}/{{ luanti_config.world.id }}/map.sqlite"
        state: present

    - name: Start Minetest-mapserver
      ansible.builtin.service:
        name: mapserver@{{ luanti_config.world.id }}.service
        enabled: true
        state: started
