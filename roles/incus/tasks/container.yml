---

- name: Get info from ct-{{ container.hostname }}
  ansible.builtin.command: incus info ct-{{ container.hostname }}
  changed_when: false
  failed_when: false
  register: incus_info

- name: Copy input template
  ansible.builtin.template:
    src: config.stdin.j2
    dest: /tmp/config.stdin
  changed_when: false

- name: Copy auth keys template
  ansible.builtin.template:
    src: authorized_keys.j2
    dest: /tmp/authorized_keys
  changed_when: false

- name: Copy initial network config for eth0
  ansible.builtin.template:
    src: eth0.network.j2
    dest: /tmp/eth0.network
  changed_when: false

- name: Copy initial network config for eth1
  ansible.builtin.template:
    src: eth1.network.j2
    dest: /tmp/eth1.network
  changed_when: false

- name: Copy kickstart script
  ansible.builtin.template:
    src: kickstart.sh.j2
    dest: /tmp/kickstart.sh
  changed_when: false

- name: Container already exists ct-{{ container.hostname }}
  when: incus_info.rc == 0
  block:
    # TODO: Check if the container needs to be updated or rebuilt
    - name: Nothing needs to be done :D
      ansible.builtin.debug:
        msg: "YAY!!!"

- name: Container needs to be created ct-{{ container.hostname }}
  when: incus_info.rc != 0
  block:

    - name: Make sure there is no trusted host with the same ip
      ansible.builtin.lineinfile:
        path: /etc/ssh/ssh_known_hosts
        state: absent
        regexp: '^(# )?{{ container.ansible_host | replace(".", "\.") }}\D'

    - name: Make sure there is no trusted host with the same ip
      ansible.builtin.lineinfile:
        path: /root/.ssh/known_hosts
        state: absent
        regexp: '^(# )?{{ container.ansible_host | replace(".", "\.") }}\D'

    - name: Run setup on ct-{{ container.hostname }}
      ansible.builtin.shell: |
        incus create \
          images:fedora/42/default ct-{{ container.hostname }} \
          < /tmp/config.stdin
        incus file create \
          ct-{{ container.hostname }}/home/ansible/.ssh/
        incus file create \
          ct-{{ container.hostname }}/root/.ssh/
        incus file push \
          /tmp/authorized_keys \
          ct-{{ container.hostname }}/home/ansible/.ssh/authorized_keys
        incus file push \
          /tmp/authorized_keys \
          ct-{{ container.hostname }}/root/.ssh/authorized_keys
        incus file push \
          /tmp/config.stdin \
          ct-{{ container.hostname }}/opt/config.stdin
        incus file push \
          /tmp/eth0.network \
          ct-{{ container.hostname }}/etc/systemd/network/eth0.network
        incus file push \
          /tmp/eth1.network \
          ct-{{ container.hostname }}/etc/systemd/network/eth1.network
        incus file push \
          /tmp/kickstart.sh \
          ct-{{ container.hostname }}/opt/kickstart.sh --mode 0755
        incus start ct-{{ container.hostname }}

    - name: Wait for container to be active and to have an active connection
      ansible.builtin.command: >-
        incus exec
        ct-{{ container.hostname }}
        --
        ping -c 1 www.google.com
      register: service_status
      until: service_status.rc == 0
      retries: 30  # Number of retries
      delay: 5    # Delay in seconds between retries

    - name: Install stuff on the containers
      ansible.builtin.command: >-
        incus exec
        ct-{{ container.hostname }}
        /opt/kickstart.sh

    - name: Wait 120 seconds for port 22 to become open and contain "OpenSSH"
      ansible.builtin.wait_for:
        port: 22
        host: '{{ container.ansible_host }}'
        search_regex: OpenSSH
        delay: 5
        timeout: 120

    - name: Check if container is a trusted machine ct-{{ container.hostname }}
      ansible.builtin.command: >-
        ssh-keygen
        -F {{ container.ansible_host }}
        -f /etc/ssh/ssh_known_hosts
      changed_when: false
      failed_when: false
      register: trust_process

    - name: Add container to trusted list ct-{{ container.hostname }}
      ansible.builtin.shell: >-
        ssh-keyscan {{ container.ansible_host }} >>
        /etc/ssh/ssh_known_hosts
      when: trust_process.rc != 0

    - name: Add container to known machines ct-{{ container.hostname }}
      ansible.builtin.shell: >-
        ssh-keyscan {{ container.ansible_host }} >>
        /root/.ssh/known_hosts
      when: trust_process.rc != 0

    - name: Add container to cockpit machines ct-{{ container.hostname }}
      ansible.builtin.copy:
        dest: /etc/cockpit/machines.d/10-ct-{{ container.hostname }}.json
        content: |
          {
            "{{ container.ansible_host }}": {
              "visible": true,
              "address": "{{ container.ansible_host }}",
              "user": "root"
            }
          }
      when: trust_process.rc != 0
