---

- name: Submodule is created {{ btrfs_storage.path + storage_data.path }}
  community.general.btrfs_subvolume:
    name: '{{ storage_data.path }}'
    filesystem_device: '{{ btrfs_storage.device }}'

- name: Get current qgroup
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      btrfs qgroup show -reF --iec \
          {{ btrfs_storage.path }}{{ storage_data.path }} | \
        sed -n 3p | \
        awk '{print $1}'
  register: incus_qgroupid
  changed_when: false

- name: Get current size
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      btrfs qgroup show -reF --iec \
          {{ btrfs_storage.path }}{{ storage_data.path }} | \
        sed -n 3p | \
        awk '{print $4}'
  register: incus_max_referenced
  changed_when: false

- name: Get configured size
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      echo {{ storage_data.size }} | numfmt --from=iec
  register: incus_expected_size
  changed_when: false
  when: "'size' in storage_data"

- name: Resize on existing size config {{ incus_qgroupid.stdout }}
  ansible.builtin.command: >-
    btrfs
    qgroup limit {{ storage_data.size }}
    {{ incus_qgroupid.stdout }}
    {{ btrfs_storage.path }}{{ storage_data.path }}
  changed_when: false
  when: "'size' in storage_data and (
      ( incus_max_referenced.stdout | int ) != ( incus_expected_size.stdout | int )
    )"

- name: No limit when no size config
  ansible.builtin.command: >-
    btrfs
    qgroup
    limit 'none'
    {{ incus_qgroupid.stdout }}
    {{ btrfs_storage.path }}{{ storage_data.path }}
  changed_when: false
  when: "'size' not in storage_data and (
      incus_max_referenced.stdout != 'none'
    )"
